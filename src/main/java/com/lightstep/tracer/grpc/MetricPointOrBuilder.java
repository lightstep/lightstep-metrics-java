// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metrics.proto

package com.lightstep.tracer.grpc;

public interface MetricPointOrBuilder extends
    // @@protoc_insertion_point(interface_extends:lightstep.metrics.MetricPoint)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Kind indicates the semantics of this point. Kind should always be the same for a given metric
   * name (e.g. "cpu.usage" should always have the same kind)
   * </pre>
   *
   * <code>.lightstep.metrics.MetricKind kind = 1;</code>
   */
  int getKindValue();
  /**
   * <pre>
   * Kind indicates the semantics of this point. Kind should always be the same for a given metric
   * name (e.g. "cpu.usage" should always have the same kind)
   * </pre>
   *
   * <code>.lightstep.metrics.MetricKind kind = 1;</code>
   */
  com.lightstep.tracer.grpc.MetricKind getKind();

  /**
   * <pre>
   * MetricName indicates the metric being emitted.
   * </pre>
   *
   * <code>string metric_name = 2;</code>
   */
  java.lang.String getMetricName();
  /**
   * <pre>
   * MetricName indicates the metric being emitted.
   * </pre>
   *
   * <code>string metric_name = 2;</code>
   */
  com.google.protobuf.ByteString
      getMetricNameBytes();

  /**
   * <pre>
   * Start of the interval for which the points represent.
   * - All Counter points will be assumed to represent the entire interval.
   * - All Gauge points will be assumed to be instantaneous at the start of the interval.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start = 3;</code>
   */
  boolean hasStart();
  /**
   * <pre>
   * Start of the interval for which the points represent.
   * - All Counter points will be assumed to represent the entire interval.
   * - All Gauge points will be assumed to be instantaneous at the start of the interval.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start = 3;</code>
   */
  com.google.protobuf.Timestamp getStart();
  /**
   * <pre>
   * Start of the interval for which the points represent.
   * - All Counter points will be assumed to represent the entire interval.
   * - All Gauge points will be assumed to be instantaneous at the start of the interval.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start = 3;</code>
   */
  com.google.protobuf.TimestampOrBuilder getStartOrBuilder();

  /**
   * <pre>
   * Duration of the interval for which the points represent. The end of the interval is start + duration.
   * We expect this value to be unset or zero for Gauge points.
   * </pre>
   *
   * <code>.google.protobuf.Duration duration = 4;</code>
   */
  boolean hasDuration();
  /**
   * <pre>
   * Duration of the interval for which the points represent. The end of the interval is start + duration.
   * We expect this value to be unset or zero for Gauge points.
   * </pre>
   *
   * <code>.google.protobuf.Duration duration = 4;</code>
   */
  com.google.protobuf.Duration getDuration();
  /**
   * <pre>
   * Duration of the interval for which the points represent. The end of the interval is start + duration.
   * We expect this value to be unset or zero for Gauge points.
   * </pre>
   *
   * <code>.google.protobuf.Duration duration = 4;</code>
   */
  com.google.protobuf.DurationOrBuilder getDurationOrBuilder();

  /**
   * <pre>
   * Labels contain labels specific to this point.
   * </pre>
   *
   * <code>repeated .lightstep.collector.KeyValue labels = 5;</code>
   */
  java.util.List<com.lightstep.tracer.grpc.KeyValue> 
      getLabelsList();
  /**
   * <pre>
   * Labels contain labels specific to this point.
   * </pre>
   *
   * <code>repeated .lightstep.collector.KeyValue labels = 5;</code>
   */
  com.lightstep.tracer.grpc.KeyValue getLabels(int index);
  /**
   * <pre>
   * Labels contain labels specific to this point.
   * </pre>
   *
   * <code>repeated .lightstep.collector.KeyValue labels = 5;</code>
   */
  int getLabelsCount();
  /**
   * <pre>
   * Labels contain labels specific to this point.
   * </pre>
   *
   * <code>repeated .lightstep.collector.KeyValue labels = 5;</code>
   */
  java.util.List<? extends com.lightstep.tracer.grpc.KeyValueOrBuilder> 
      getLabelsOrBuilderList();
  /**
   * <pre>
   * Labels contain labels specific to this point.
   * </pre>
   *
   * <code>repeated .lightstep.collector.KeyValue labels = 5;</code>
   */
  com.lightstep.tracer.grpc.KeyValueOrBuilder getLabelsOrBuilder(
      int index);

  /**
   * <code>uint64 uint64_value = 6;</code>
   */
  long getUint64Value();

  /**
   * <code>double double_value = 7;</code>
   */
  double getDoubleValue();

  public com.lightstep.tracer.grpc.MetricPoint.ValueCase getValueCase();
}
